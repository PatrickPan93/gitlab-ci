include:
  - project: 'devops/gitlab-ci'
    ref: main
    file: 'jobs/build.yml'
  - project: 'devops/gitlab-ci'
    ref: main
    file: 'jobs/test.yml'
  - project: 'devops/gitlab-ci'
    ref: main
    file: 'jobs/code-analysis.yml'
  - project: 'devops/gitlab-ci'
    ref: main
    file: 'jobs/artifactory.yml'

variables:
  # control whether pull the latest code
  #GIT_CHECKOUT: "false"
  CACHE_DIR: 'target/'
  MAVEN_CACHE: '.m2/repository/'
  BUILD_SHELL: 'mvn clean package -DskipTests -Dmaven.repo.local=.m2/repository/'
  BUILD_IMAGE: 'maven:3.8.3-jdk-8'

  # job流程控制
  RUN_PIPELINE_BUILD: 'yes'
  RUN_DEPLOY_ARTIFACTS: 'yes'
  RUN_BUILD_IMAGE: 'yes'
  RUN_CODE_ANALYSIS: 'yes'

  TEST_SHELL: 'mvn test -Dmaven.repo.local=.m2/repository/'
  TEST_IMAGE: 'maven:3.8.3-jdk-8'
  JUNIT_REPORT_PATH: 'target/surefire-reports/TEST-*.xml'

  SONAR_PROJECT_LANG: "JAVA"
  SONAR_SCANNER_IMAGE: 'sonarsource/sonar-scanner-cli:4.6'
  SONAR_SERVER_URL: 'http://sonarqube-sonarqube:9000'
  #SONAR_LOGIN: ""
  SCAN_DIR: 'src'
  SONAR_USER: 'admin'
  SONAR_PASSWORD: 'pzb19930830'
  SONAR_SCAN_ARGS: '-Dsonar.sourceEncoding=UTF-8
                    -Dsonar.java.binaries=target/classes
                    -Dsonar.java.test.binaries=target/test-classes
                    -Dsonar.java.surefire.report=target/surefire-reports'

  ARTIFACT_PATH: 'target/*.jar'
  ARTIFACTORY_USER: "admin"
  ARTIFACTORY_PASSWORD: "Pzb19930830"
  ARTIFACTORY_URL: "http://artifactory.devops.com:8081"
  # repo name
  ARTIFACTORY_NAME: "artifactory/ci-devops"
  TARGET_FILE_PATH: $CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/$CI_COMMIT_REF_NAME/$CI_COMMIT_SHORT_SHA-$CI_PIPELINE_ID
  TARGET_ARTIFACT_NAME: $CI_PROJECT_NAME-$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA-$CI_PIPELINE_ID.jar

  DOCKER_REGISTRY_USER: "admin"
  DOCKER_REGISTRY_PASSWORD: "Harbor12345"
  DOCKER_REGISTRY_URL: "harbor.devops.com"
  IMAGE_NAME: $CI_PROJECT_NAME:$CI_COMMIT_REF_NAME-$CI_COMMIT_SHORT_SHA-$CI_PIPELINE_ID
  DOCKER_FILE_PATH: "./Dockerfile"

workflow:
  rules:
    - if: $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"
      when: never
    - when: always
# 定义全局缓存
cache:
  # use branchName as cache Key
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - ${CACHE_DIR}
    - ${MAVEN_CACHE}

stages:
  - build
  - test
  - parallel01
  - get-analysis-result
  - deploy-artifact

build:
  #variables:
    # should pull the latest code
  #  GIT_CHECKOUT: "true"
  stage: build
  extends: .build

test:
  stage: test
  extends: .test
  # Junit report of Java
  artifacts:
    reports:
      junit: ${JUNIT_REPORT_PATH}

# use the same stage name to parallel01
code-analysis:
  stage: parallel01
  extends: .code-analysis
  cache:
    # use branchName as cache Key
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - ${CACHE_DIR}

build-image:
  stage: parallel01
  extends: .build-image
  cache:
    # use branchName as cache Key
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - ${CACHE_DIR}

get-analysis-result:
  stage: get-analysis-result
  extends: .get-analysis-result
  cache:
    # use branchName as cache Key
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - ${CACHE_DIR}
  needs:
    - code-analysis

deploy-artifact:
  stage: deploy-artifact
  extends: .deploy-artifact
  cache:
    # use branchName as cache Key
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - ${CACHE_DIR}

## 下载制品
#down-artifact:
#  image: ${CURL_IMAGE}
#  stage: down-artifact
#  extends: .down-artifact